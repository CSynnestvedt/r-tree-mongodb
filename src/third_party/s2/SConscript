# -*- mode: python -*-

Import("env")

env = env.Clone()

env.SConscript(
    dirs=[
        "base",
        "strings",
        "util/coding",
        "util/math",
    ],
    exports=[
        'env',
    ],
)

env.Append(CCFLAGS=['-DDEBUG_MODE=false'])

# Clang warns about struct/class tag mismatch, but as long as this is
# not a problem on Windows, these mismatches can be ignored
# http://stackoverflow.com/questions/4866425/mixing-class-and-struct. W
# warning so it doesn't become an error.
if env.ToolchainIs('clang'):
    env.Append(CCFLAGS=['-Wno-mismatched-tags'])

if env.TargetOSIs('windows'):
    # C4996: 'memccpy': The POSIX name for this item is deprecated. Instead, use the ISO C and C++
    # conformant name: _memccpy. See online help for details
    env.Append(CCFLAGS=['/wd4996'])

env.Library(
    "s2",
    [
        "s1angle.cc",
        "s2.cc",
        "s2cellid.cc",
        "s2latlng.cc",
        "s1interval.cc",
        "s2cap.cc",
        "s2cell.cc",
        "s2cellunion.cc",
        "s2edgeindex.cc",
        "s2edgeutil.cc",
        "s2latlngrect.cc",
        "s2loop.cc",
        "s2pointregion.cc",
        "s2polygon.cc",
        "s2polygonbuilder.cc",
        "s2polyline.cc",
        "s2r2rect.cc",
        "s2region.cc",
        "s2regioncoverer.cc",
        "s2regionintersection.cc",
        "s2regionunion.cc",
        "AbstractSTRtree.cpp",
        "Assert.cpp",
        "Bintree.cpp",
        "BinTreeKey.cpp",
        "BinTreeNode.cpp",
        "BinTreeNodeBase.cpp",
        "BinTreeRoot.cpp",
        "BoundaryNodeRule.cpp",
        "CGAlgorithmsDD.cpp",
        "ConnectedElementLocationFilter.cpp",
        "ConnectedElementPointFilter.cpp",
        "ConvexHull.cpp",
        "Coordinate.cpp",
        "CoordinateArraySequence.cpp",
        "CoordinateArraySequenceFactory.cpp",
        "CoordinateSequence.cpp",
        "Depth.cpp",
        "Dimension.cpp",
        "DistanceOp.cpp",
        "Edge.cpp",
        "EdgeEnd.cpp",
        "EdgeEndBuilder.cpp",
        "EdgeEndBundle.cpp",
        "EdgeEndStar.cpp",
        "EdgeIntersectionList.cpp",
        "EdgeRing.cpp",
        "Envelope.cpp",
        "GeometricShapeFactory.cpp",
        "Geometry.cpp",
        "GeometryCollection.cpp",
        "GeometryComponentFilter.cpp",
        "GeometryFactory.cpp",
        "GeometryGraph.cpp",
        "GeometryGraphOperation.cpp",
        "GeometryLocation.cpp",
        "GraphComponent.cpp",
        "HCoordinate.cpp",
        "IndexedNestedHoleTester.cpp",
        "IndexedNestedPolygonTester.cpp",
        "Interrupt.cpp",
        "IntersectionMatrix.cpp",
        "Interval.cpp",
        "IntervalSize.cpp",
        "IsSimpleOp.cpp",
        "IsValidOp.cpp",
        "Key.cpp",
        "Label.cpp",
        "LinearComponentExtracter.cpp",
        "LinearRing.cpp",
        "LineIntersector.cpp",
        "LineSegment.cpp",
        "LineString.cpp",
        "Location.cpp",
        "math.cpp",
        "MaximalEdgeRing.cpp",
        "MinimalEdgeRing.cpp",
        "MonotoneChain.cpp",
        "MonotoneChainBuilder.cpp",
        "MonotoneChainEdge.cpp",
        "MonotoneChainIndexer.cpp",
        "MonotoneChainOverlapAction.cpp",
        "MonotoneChainSelectAction.cpp",
        "MultilineString.cpp",
        "MultiPoint.cpp",
        "MultiPolygon.cpp",
        "Node.cpp",
        "NodeBase.cpp",
        "NodeFactory.cpp",
        "NodeMap.cpp",
        "NotRepresentableException.cpp",
        "OverlayNodeFactory.cpp",
        "PlanarGraph.cpp",
        "Point.cpp",
        "PointExtracter.cpp",
        "PointLocator.cpp",
        "PointOnGeometryLocator.cpp",
        "Polygon.cpp",
        "PolygonExtracter.cpp",
        "Position.cpp",
        "PrecisionModel.cpp",
        "Quadrant.cpp",
        "Quadtree.cpp",
        "QuadtreeNode.cpp",
        "QuadtreeRoot.cpp",
        "RayCrossingCounter.cpp",
        "RectangleContains.cpp",
        "RectangleIntersects.cpp",
        "RelateComputer.cpp",
        "RelateNode.cpp",
        "RelateNodeFactory.cpp",
        "RelateNodeGraph.cpp",
        "RelateOp.cpp",
        "RobustDeterminant.cpp",
        "SegmentIntersectionTester.cpp",
        "SegmentIntersector.cpp",
        "ShortCircuitedMemoryVisitor.cpp",
        "SimpleMCSweepLineIntersector.cpp",
        "SimplePointInAreaLocator.cpp",
        "SIRtree.cpp",
        "STRtree.cpp",
        "SweepLineEvent.cpp",
        "TopologyException.cpp",
        "TopologyLocation.cpp",
        "TopologyValidationError.cpp",
    ],
    LIBDEPS=[
        '$BUILD_DIR/third_party/s2/base/base_s2',
        '$BUILD_DIR/third_party/s2/strings/strings',
        '$BUILD_DIR/third_party/s2/util/coding/coding',
        '$BUILD_DIR/third_party/s2/util/math/math',
    ],
)

#env.Program('r1interval_test', ['r1interval_test.cc'],
#            LIBDEPS=['s2', '$BUILD_DIR/third_party/gtest/gtest_with_main'])
#env.Program('s1angle_test', ['s1angle_test.cc'],
#            LIBDEPS=['s2', '$BUILD_DIR/third_party/gtest/gtest_with_main'])
#env.Program('s1interval_test', ['s1interval_test.cc'],
#            LIBDEPS=['s2', '$BUILD_DIR/third_party/gtest/gtest_with_main'])
#env.Program('s2regioncoverer_test', ['s2regioncoverer_test.cc'],
#            LIBDEPS=['s2', '$BUILD_DIR/third_party/gtest/gtest_with_main'])
#env.Program('s2_test', ['s2_test.cc'],
#            LIBDEPS=['s2', '$BUILD_DIR/third_party/gtest/gtest_with_main'])
